<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'doctrine_mongodb.odm.default_configuration' shared service.

include_once $this->targetDirs[3].'/vendor/doctrine/mongodb/lib/Doctrine/MongoDB/Configuration.php';
include_once $this->targetDirs[3].'/vendor/doctrine/mongodb-odm/lib/Doctrine/ODM/MongoDB/Configuration.php';
include_once $this->targetDirs[3].'/vendor/doctrine/cache/lib/Doctrine/Common/Cache/Cache.php';
include_once $this->targetDirs[3].'/vendor/doctrine/cache/lib/Doctrine/Common/Cache/FlushableCache.php';
include_once $this->targetDirs[3].'/vendor/doctrine/cache/lib/Doctrine/Common/Cache/ClearableCache.php';
include_once $this->targetDirs[3].'/vendor/doctrine/cache/lib/Doctrine/Common/Cache/MultiGetCache.php';
include_once $this->targetDirs[3].'/vendor/doctrine/cache/lib/Doctrine/Common/Cache/MultiPutCache.php';
include_once $this->targetDirs[3].'/vendor/doctrine/cache/lib/Doctrine/Common/Cache/CacheProvider.php';
include_once $this->targetDirs[3].'/vendor/doctrine/cache/lib/Doctrine/Common/Cache/ArrayCache.php';
include_once $this->targetDirs[3].'/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/Driver/MappingDriver.php';
include_once $this->targetDirs[3].'/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/Driver/MappingDriverChain.php';
include_once $this->targetDirs[3].'/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.php';
include_once $this->targetDirs[3].'/vendor/doctrine/mongodb-odm/lib/Doctrine/ODM/MongoDB/Mapping/Driver/AnnotationDriver.php';
include_once $this->targetDirs[3].'/vendor/doctrine/mongodb-odm/lib/Doctrine/ODM/MongoDB/Repository/RepositoryFactory.php';
include_once $this->targetDirs[3].'/vendor/doctrine/mongodb-odm-bundle/Repository/ContainerRepositoryFactory.php';
include_once $this->targetDirs[3].'/vendor/doctrine/mongodb-odm-bundle/Logger/AggregateLogger.php';
include_once $this->targetDirs[3].'/vendor/doctrine/mongodb-odm-bundle/Logger/Logger.php';

$this->services['doctrine_mongodb.odm.default_configuration'] = $instance = new \Doctrine\ODM\MongoDB\Configuration();

$a = new \Doctrine\Common\Cache\ArrayCache();
$a->setNamespace('sf_mongodb_default_kfpeo9a');
$b = new \Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain();
$b->addDriver(new \Doctrine\ODM\MongoDB\Mapping\Driver\AnnotationDriver(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->getAnnotationReaderService()) && false ?: '_'}, [0 => ($this->targetDirs[3].'/src/AppBundle/Document')]), 'AppBundle\\Document');
$c = new \Doctrine\Bundle\MongoDBBundle\Logger\Logger(${($_ = isset($this->services['monolog.logger.doctrine']) ? $this->services['monolog.logger.doctrine'] : $this->load('getMonolog_Logger_DoctrineService.php')) && false ?: '_'});
$c->setBatchInsertThreshold(4);

$instance->setDocumentNamespaces(['AppBundle' => 'AppBundle\\Document']);
$instance->setMetadataCacheImpl($a);
$instance->setMetadataDriverImpl($b);
$instance->setProxyDir(($this->targetDirs[0].'/doctrine/odm/mongodb/Proxies'));
$instance->setProxyNamespace('MongoDBODMProxies');
$instance->setAutoGenerateProxyClasses(0);
$instance->setHydratorDir(($this->targetDirs[0].'/doctrine/odm/mongodb/Hydrators'));
$instance->setHydratorNamespace('Hydrators');
$instance->setAutoGenerateHydratorClasses(0);
$instance->setDefaultDB('socialnet');
$instance->setDefaultCommitOptions([]);
$instance->setRetryConnect(0);
$instance->setRetryQuery(0);
$instance->setDefaultRepositoryClassName('Doctrine\\ODM\\MongoDB\\DocumentRepository');
$instance->setPersistentCollectionDir(($this->targetDirs[0].'/doctrine/odm/mongodb/PersistentCollections'));
$instance->setPersistentCollectionNamespace('PersistentCollections');
$instance->setAutoGeneratePersistentCollectionClasses(0);
$instance->setRepositoryFactory(new \Doctrine\Bundle\MongoDBBundle\Repository\ContainerRepositoryFactory(${($_ = isset($this->services['service_locator.sr6ctxe']) ? $this->services['service_locator.sr6ctxe'] : ($this->services['service_locator.sr6ctxe'] = new \Symfony\Component\DependencyInjection\ServiceLocator([]))) && false ?: '_'}));
$instance->setLoggerCallable([0 => new \Doctrine\Bundle\MongoDBBundle\Logger\AggregateLogger([0 => $c, 1 => ${($_ = isset($this->services['doctrine_mongodb.odm.data_collector.pretty']) ? $this->services['doctrine_mongodb.odm.data_collector.pretty'] : $this->getDoctrineMongodb_Odm_DataCollector_PrettyService()) && false ?: '_'}]), 1 => 'logQuery']);

return $instance;
